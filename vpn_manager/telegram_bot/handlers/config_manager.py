import logging
import os
from datetime import datetime

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from asgiref.sync import sync_to_async
from vpn.models.configs import MODEL_MAP, AmneziaWGConfig, VLESSConfig, VPNUser

from telegram_bot import bot
from telegram_bot.helpers.config_generator import generate_vless_config, generate_wg_config


router = Router()
logger = logging.getLogger(__name__)


@router.message(Command('getvless'))
async def get_vless_handler(message: types.Message, user: VPNUser, expires: datetime | None = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getvless –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VLESS-–∫–æ–Ω—Ñ–∏–≥–∞."""

    progress_message = await message.answer('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º VLESS-–∫–æ–Ω—Ñ–∏–≥...')

    try:
        text, _ = await generate_vless_config(user, expires)
        await progress_message.edit_text(text, parse_mode='Markdown')
    except ValueError as e:
        await progress_message.edit_text(str(e))


# XXX –û—Ç–∫–∞–∑—ã–≤–∞–µ–º—Å—è –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ AmneziaWG,
# —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ç–æ–∫–æ–ª —Ç–µ–ø–µ—Ä—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
# @router.message(Command('getwg'))
async def get_wg_handler(message: types.Message, user: VPNUser, expires: datetime | None = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getwg –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AmneziaWG-–∫–æ–Ω—Ñ–∏–≥–∞."""

    progress_message = await message.answer('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AmneziaWG-–∫–æ–Ω—Ñ–∏–≥...')

    try:
        text, wg_config = await generate_wg_config(user, expires)
        await progress_message.delete()
        await bot.send_document(
            chat_id=message.from_user.id,
            document=FSInputFile(wg_config.tmp_filepath),
            caption=text,
        )
        try:
            os.remove(wg_config.tmp_filepath)
        except OSError:
            logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s', wg_config.tmp_filepath)
    except ValueError as e:
        await progress_message.edit_text(str(e))


@router.message(Command('configs'))
async def list_configs(message: types.Message, user: VPNUser):
    configs = await sync_to_async(lambda: user.configs)()
    if not configs:
        return await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–æ–≤.')

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –≤—ã–≤–æ–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    for cfg in configs:
        kb = InlineKeyboardBuilder()
        if isinstance(cfg, AmneziaWGConfig):
            kb.button(text='üîÑ –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª', callback_data=f'change_proto:{cfg.__class__.__name__}:{cfg.id}')
        else:
            kb.button(text='‚è± –ü—Ä–æ–¥–ª–∏—Ç—å', callback_data=f'extend_config:{cfg.id}')
        # XXX –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏,
        # —á—Ç–æ–±—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è–ª–∞—Å—å
        # kb.button(text='‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_config:{cfg.__class__.__name__}:{cfg.id}')  # noqa: ERA001
        kb.button(text='üìã –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥', callback_data=f'get_config:{cfg.__class__.__name__}:{cfg.id}')
        kb.adjust(1, 2)

        # –∫—Ä–∞—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        if isinstance(cfg, AmneziaWGConfig):
            text = (
                f'üîê *AmneziaWG*\n'
                f'ID: `{cfg.client_id}`\n'
                f'–ò—Å—Ç–µ–∫–∞–µ—Ç: {cfg.expires_at:%d-%m-%Y}\n'
                f'–°—Ç–∞—Ç—É—Å: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if cfg.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}'
                f'**\n\n*–í–∞–∂–Ω–æ!*\nAmneziaWG –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –≤ –†–æ—Å—Å–∏–∏, –∏–∑–º–µ–Ω–∏—Ç–µ '
                f'—Å–≤–æ–∏ AmneziaWG –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –Ω–∞ VLESS, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–æ–Ω—Ñ–∏–≥–æ–º.'
            )
        elif isinstance(cfg, VLESSConfig):
            text = (
                f'üîë *VLESS*\n'
                f'ID: `{cfg.client_id}`\n'
                f'–ò—Å—Ç–µ–∫–∞–µ—Ç: {cfg.expires_at:%d-%m-%Y}\n'
                f'–°—Ç–∞—Ç—É—Å: {"‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if cfg.is_active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"}'
            )

        await message.answer(text, parse_mode='Markdown', reply_markup=kb.as_markup())

    return None


@router.callback_query(lambda c: c.data and c.data.startswith('change_proto:'))
async def change_protocol_cb(cq: types.CallbackQuery, user: VPNUser):
    _, model_name, config_id = cq.data.split(':')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    kb = InlineKeyboardBuilder()
    kb.button(text='‚úÖ –î–∞, –ø–æ–º–µ–Ω—è—Ç—å', callback_data=f'confirm_change:{model_name}:{config_id}')
    kb.button(text='‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å', callback_data='cancel_change')
    kb.adjust(2)

    await cq.message.edit_text(
        '‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!*\n\n'
        '–ü—Ä–∏ —Å–º–µ–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥ –±—É–¥–µ—Ç —É–¥–∞–ª—ë–Ω –∏ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.\n'
        '–°—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.\n\n'
        '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
        parse_mode='Markdown',
        reply_markup=kb.as_markup(),
    )


@router.callback_query(lambda c: c.data and c.data.startswith('confirm_change:'))
async def confirm_change_protocol_cb(cq: types.CallbackQuery, user: VPNUser):
    _, model_name, config_id = cq.data.split(':')
    Model = MODEL_MAP[model_name]  # noqa: N806
    config = await sync_to_async(Model.objects.get)(pk=config_id, user=user)

    expires = config.expires_at

    try:
        await cq.message.edit_text('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥...')
        await config.adelete()
    except Model.DoesNotExist:
        await cq.answer('‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞')
        await cq.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞', show_alert=True)
        return

    await cq.message.edit_text('üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥...')

    try:
        if model_name == 'AmneziaWGConfig':
            text, _ = await generate_vless_config(user, expires)
            await cq.message.edit_text(text, parse_mode='Markdown')
        else:
            text, wg_config = await generate_wg_config(user, expires)
            await cq.message.edit_text('‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
            await bot.send_document(
                chat_id=cq.from_user.id,
                document=FSInputFile(wg_config.tmp_filepath),
                caption=text,
            )
            try:
                os.remove(wg_config.tmp_filepath)
            except OSError:
                logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s', wg_config.tmp_filepath)
    except ValueError as e:
        await cq.message.edit_text(str(e))


@router.callback_query(lambda c: c.data == 'cancel_change')
async def cancel_change_protocol_cb(cq: types.CallbackQuery):
    await cq.message.edit_text('‚ùå –°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


# XXX –û—Ç–∫–ª—é—á–µ–Ω–æ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏,
# —á—Ç–æ–±—ã –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–µ –º–µ–Ω—è–ª–∞—Å—å
# @router.callback_query(lambda c: c.data and c.data.startswith('delete_config:'))
async def delete_config_cb(cq: types.CallbackQuery, user: VPNUser):
    _, model_name, config_id = cq.data.split(':')
    Model = MODEL_MAP[model_name]  # noqa: N806
    config = await sync_to_async(Model.objects.get)(pk=config_id, user=user)

    try:
        await cq.message.edit_text('üîÑ –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ñ–∏–≥...')
        await config.adelete()
        await cq.message.edit_text('‚úÖ –ö–æ–Ω—Ñ–∏–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    except Model.DoesNotExist:
        await cq.answer('‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞')
        await cq.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞', show_alert=True)


@router.callback_query(lambda c: c.data and c.data.startswith('get_config:'))
async def get_config_cb(cq: types.CallbackQuery, user: VPNUser):
    _, model_name, config_id = cq.data.split(':')
    Model = MODEL_MAP[model_name]  # noqa: N806
    config = await sync_to_async(Model.objects.get)(pk=config_id, user=user)

    try:
        await cq.message.edit_text('üîÑ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥–µ...')
        if isinstance(config, VLESSConfig):
            _, vless_url = await sync_to_async(config.get_vless_url)()
            await cq.message.answer(f'‚úÖ –í–∞—à VLESS-–∫–æ–Ω—Ñ–∏–≥:\n```\n{vless_url}\n```', parse_mode='Markdown')
        elif isinstance(config, AmneziaWGConfig):
            tmp_filepath = await sync_to_async(config.get_existing_config)()
            await cq.message.delete()
            await bot.send_document(
                chat_id=cq.from_user.id,
                document=FSInputFile(tmp_filepath),
                caption='‚úÖ –í–∞—à AmneziaWG-–∫–æ–Ω—Ñ–∏–≥',
            )
            try:
                os.remove(tmp_filepath)
            except OSError:
                logger.exception('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª %s', tmp_filepath)

        await cq.answer()
    except Exception:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞')
        await cq.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞', show_alert=True)


@router.callback_query(lambda c: c.data and c.data.startswith('extend_config:'))
async def extend_config_cb(cq: types.CallbackQuery):
    await cq.answer('üîÑ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', show_alert=True)
